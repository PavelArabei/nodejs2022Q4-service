openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - isWorking
  /user:
    post:
      operationId: UserController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithoutPassword'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      tags: &ref_0
        - user
    get:
      operationId: UserController_findAll
      parameters: []
      responses:
        '200':
          description: get all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithoutPassword'
      tags: *ref_0
  /user/{id}:
    get:
      operationId: UserController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '200':
          description: get current users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithoutPassword'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_0
    put:
      operationId: UserController_update
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithoutPassword'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_0
    delete:
      operationId: UserController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '204':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_0
  /track:
    post:
      operationId: TrackController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      tags: &ref_1
        - track
    get:
      operationId: TrackController_findAll
      parameters: []
      responses:
        '200':
          description: get all tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags: *ref_1
  /track/{id}:
    get:
      operationId: TrackController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '200':
          description: get current track
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_1
    put:
      operationId: TrackController_update
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: update track
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_1
    delete:
      operationId: TrackController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '204':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_1
  /album:
    post:
      operationId: AlbumController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      tags: &ref_2
        - album
    get:
      operationId: AlbumController_findAll
      parameters: []
      responses:
        '200':
          description: get all albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
      tags: *ref_2
  /album/{id}:
    get:
      operationId: AlbumController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '200':
          description: get current album
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_2
    put:
      operationId: AlbumController_update
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: update album
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_2
    delete:
      operationId: AlbumController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '204':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_2
  /artist:
    post:
      operationId: ArtistController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
      tags: &ref_3
        - artist
    get:
      operationId: ArtistController_findAll
      parameters: []
      responses:
        '200':
          description: get all artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
      tags: *ref_3
  /artist/{id}:
    get:
      operationId: ArtistController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '200':
          description: get current artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_3
    put:
      operationId: ArtistController_update
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: update artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_3
    delete:
      operationId: ArtistController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '204':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_3
  /favs:
    get:
      operationId: FavController_findAll
      parameters: []
      responses:
        '200':
          description: get favs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favs'
      tags: &ref_4
        - favs
  /favs/track/{id}:
    post:
      operationId: FavController_addTrackToFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '422':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableDto'
      tags: *ref_4
    delete:
      operationId: FavController_removeTrackFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '204':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_4
  /favs/artist/{id}:
    post:
      operationId: FavController_addArtistToFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '422':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableDto'
      tags: *ref_4
    delete:
      operationId: FavController_removeArtistFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '204':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_4
  /favs/album/{id}:
    post:
      operationId: FavController_addAlbumToFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '422':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableDto'
      tags: *ref_4
    delete:
      operationId: FavController_removeAlbumFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          description: uuid format
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          schema:
            type: string
      responses:
        '204':
          description: ''
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundDto'
      tags: *ref_4
  /auth/signup:
    post:
      operationId: AuthController_signup
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
  /auth/refresh:
    post:
      operationId: AuthController_refreshToken
      parameters: []
      responses:
        '201':
          description: ''
  /auth/logout:
    post:
      operationId: AuthController_logout
      parameters: []
      responses:
        '201':
          description: ''
info:
  title: Doc
  description: ''
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
        login:
          type: string
          example: Awesome name
        version:
          type: number
          example: 1
        createdAt:
          type: number
          example: 1690575786106
        updatedAt:
          type: number
          example: 1690575786106
        password:
          type: string
          example: Very strong password
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
        - password
    UserWithoutPassword:
      type: object
      properties:
        id:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
        login:
          type: string
          example: Awesome name
        version:
          type: number
          example: 1
        createdAt:
          type: number
          example: 1690575786106
        updatedAt:
          type: number
          example: 1690575786106
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    BadRequest:
      type: object
      properties:
        statusCode:
          type: number
          example: 400
        message:
          type: string
          example: invalid data
        error:
          type: string
          example: invalid data
      required:
        - statusCode
        - message
        - error
    NotFoundDto:
      type: object
      properties:
        statusCode:
          type: number
          example: 404
        message:
          type: string
          example: Not found
        error:
          type: string
          example: Not found
      required:
        - statusCode
        - message
        - error
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: bla-bla
        newPassword:
          type: string
          description: new password must be different from old password
          example: bla-bla-bla
      required:
        - oldPassword
        - newPassword
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: cool name
        duration:
          type: number
          example: '125'
        artistId:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          nullable: true
        albumId:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          nullable: true
      required:
        - name
        - duration
        - artistId
        - albumId
    Track:
      type: object
      properties:
        id:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
        name:
          type: string
          example: Awesome name
        artistId:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          nullable: true
        albumId:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          nullable: true
        duration:
          type: number
          example: 100
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: cool name
        duration:
          type: number
          example: 125
        artistId:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88  |  null
          nullable: true
        albumId:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88  |  null
          nullable: true
      required:
        - name
        - duration
        - artistId
        - albumId
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Awesome name
        year:
          type: number
          example: 2000
        artistId:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          nullable: true
      required:
        - name
        - year
        - artistId
    Album:
      type: object
      properties:
        id:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
        name:
          type: string
          example: Awesome name
        year:
          type: number
          example: 2000
        artistId:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Awesome name
        year:
          type: number
          example: 2000
        artistId:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
          nullable: true
      required:
        - name
        - year
        - artistId
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Awesome name
        grammy:
          type: boolean
          example: false
      required:
        - name
        - grammy
    Artist:
      type: object
      properties:
        id:
          type: string
          example: 69db9eb3-4000-4eab-85c1-da409c656e88
        name:
          type: string
          example: Awesome name
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Awesome name
        grammy:
          type: boolean
          example: false
      required:
        - name
        - grammy
    Favs:
      type: object
      properties:
        artists:
          example:
            - id: 69db9eb3-4000-4eab-85c1-da409c656e88
              name: Awesome name
              grammy: false
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          example:
            - id: 69db9eb3-4000-4eab-85c1-da409c656e88
              name: Awesome name
              year: 2002
              artistId: null
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          example:
            - id: 69db9eb3-4000-4eab-85c1-da409c656e88
              name: Awesome name
              artistId: null
              albumId: null
              duration: 125
          type: array
          items:
            $ref: '#/components/schemas/Track'
      required:
        - artists
        - albums
        - tracks
    UnprocessableDto:
      type: object
      properties:
        statusCode:
          type: number
          example: 422
        message:
          type: string
          example: Not found
        error:
          type: string
          example: Not found
      required:
        - statusCode
        - message
        - error
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: cool name
        password:
          type: string
          example: cool password
      required:
        - login
        - password
